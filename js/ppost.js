// Generated by CoffeeScript 2.7.0
(function() {
  // 00000000   00000000    0000000    0000000  000000000    
  // 000   000  000   000  000   000  000          000       
  // 00000000   00000000   000   000  0000000      000       
  // 000        000        000   000       000     000       
  // 000        000         0000000   0000000      000       
  var Emitter, POST, PostMain, PostRenderer, electron, remote,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  Emitter = require('events');

  POST = '__POST__';

  if (process.type === 'renderer') {
    electron = require('electron');
    remote = require('@electron/remote');
    
      // 000   000  000  000   000    
    // 000 0 000  000  0000  000    
    // 000000000  000  000 0 000    
    // 000   000  000  000  0000    
    // 00     00  000  000   000    
    PostRenderer = class PostRenderer extends Emitter {
      constructor() {
        super();
        this.dispose = this.dispose.bind(this);
        this.id = remote.getCurrentWindow().id;
        this.ipc = electron.ipcRenderer;
        this.ipc.on(POST, (event, type, argl) => {
          return this.emit.apply(this, [type].concat(argl));
        });
        window.addEventListener('beforeunload', this.dispose);
      }

      dispose() {
        boundMethodCheck(this, PostRenderer);
        window.removeEventListener('beforeunload', this.dispose);
        this.ipc.removeAllListeners(POST);
        return this.ipc = null;
      }

      toAll(type, ...args) {
        return this.ipc.send(POST, 'toAll', type, args);
      }

      toOthers(type, ...args) {
        return this.ipc.send(POST, 'toOthers', type, args);
      }

      toMain(type, ...args) {
        return this.ipc.send(POST, 'toMain', type, args);
      }

      toOtherWins(type, ...args) {
        return this.ipc.send(POST, 'toOtherWins', type, args, this.id);
      }

      toWins(type, ...args) {
        return this.ipc.send(POST, 'toWins', type, args);
      }

      toWin(id, type, ...args) {
        return this.ipc.send(POST, 'toWin', type, args, id);
      }

      get(type, ...args) {
        return this.ipc.sendSync(POST, 'get', type, args);
      }

    };
    module.exports = new PostRenderer();
  } else {
    // 00     00   0000000   000  000   000  
    // 000   000  000   000  000  0000  000  
    // 000000000  000000000  000  000 0 000  
    // 000 0 000  000   000  000  000  0000  
    // 000   000  000   000  000  000   000  
    PostMain = class PostMain extends Emitter {
      constructor() {
        var ipc;
        super();
        this.getCallbacks = {};
        try {
          ipc = require('electron').ipcMain;
          ipc.on(POST, (event, kind, type, argl, id) => {
            var ref;
            id = id || event.sender.id;
            switch (kind) {
              case 'toMain':
                return this.sendToMain(type, argl);
              case 'toAll':
                return this.sendToWins(type, argl).sendToMain(type, argl);
              case 'toOthers':
                return this.sendToWins(type, argl, id).sendToMain(type, argl);
              case 'toOtherWins':
                return this.sendToWins(type, argl, id);
              case 'toWins':
                return this.sendToWins(type, argl);
              case 'toWin':
                return this.toWin.apply(this, [id, type].concat(argl));
              case 'get':
                return event.returnValue = (ref = this.getCallbacks[type]) != null ? ref.apply(this.getCallbacks[type], argl) : void 0;
            }
          });
        } catch (error) {}
      }

      toAll(type, ...args) {
        return this.sendToWins(type, args).sendToMain(type, args);
      }

      toMain(type, ...args) {
        return this.sendToMain(type, args);
      }

      toWins(type, ...args) {
        return this.sendToWins(type, args);
      }

      toWin(id, type, ...args) {
        var ref;
        return (ref = require('electron').BrowserWindow.fromId(id)) != null ? ref.webContents.send(POST, type, args) : void 0;
      }

      onGet(type, cb) {
        this.getCallbacks[type] = cb;
        return this;
      }

      sendToMain(type, argl) {
        argl.unshift(type);
        this.emit.apply(this, argl);
        return this;
      }

      sendToWins(type, argl, except) {
        var i, len, ref, win;
        ref = require('electron').BrowserWindow.getAllWindows();
        for (i = 0, len = ref.length; i < len; i++) {
          win = ref[i];
          if (win.id !== except) {
            win.webContents.send(POST, type, argl);
          }
        }
        return this;
      }

    };
    module.exports = new PostMain();
  }

}).call(this);
